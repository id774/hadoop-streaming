/* README.ja */

名前
 hadoop-streaming-with-ruby - Hadoop によるデータ解析の足がかり

書式
 bin/run

説明
 このソフトウェアは Hadoop を利用してデータの解析をおこなう例である。
 Ruby と Hadoop Streaming を利用する。


[環境設定]

1) 前提条件
ruby, rspec, memcached. hadoop のインストールが完了していること。

2) テスト実行
$ cd ~/hadoop-streaming-with-ruby
$ rake spec

Mapper
  単語ごとの長さが返る

Reducer
  単語の平均の長さが返る

Finished in 2.74 seconds
3 examples, 0 failures
のように表示されることを確認する。


[実行方法]

まずは Hadoop を使わずに実行する。

$ script/simple

log/result.log
に平均単語長が出力されているはずなので確認する。

次項のサンプル出力例のようになっていれば OK である。


次に Hadoop Streaming 経由で実行する。

$ bin/run

log/development.log
log/result.log
内容を確認する。


[出力例]

キーと値は単語の頭文字及び平均の長さとなるはずである。

	NaN
1	1.0
2	1.0
3	1.0
A	3.6455436516981994
B	4.03247183565275
C	4.589198443579766
D	4.645066514323023
E	4.735625236116358
F	4.76879501141753
G	4.8498130746690915
H	4.769402404220358
I	3.6973746118377715
J	3.713622542534178
K	3.7385748833024013
L	3.8100229768219984
M	3.9070596109929916
N	3.914379486392077
O	3.8628443607252176
P	3.980624718634207
Q	3.990748383546568
R	4.040258842958494
S	4.130538036284357
T	4.0929071673372075
U	4.0996789759534815
V	4.109724492643834
W	4.132046240760558
X	4.131581239114207
Y	4.119165857323487
Z	4.119165129433036
a	3.7762281992392164
b	3.8010194757209037
c	3.9281538610860167
d	3.971511821804076
e	4.008271700385191
f	4.043749442824213
g	4.070563444744448
h	4.030742796361703
i	3.9219843822237266
j	3.9253754287283935
k	3.9324545844087253
l	3.9531440235336497
m	3.913744975928625
n	3.901464269236739
o	3.8233920391203506
p	3.8804106046977873
q	3.8845671364560856
r	3.912061243301753
s	3.974026297661619
t	3.923703930801062
u	3.9282187532587654
v	3.9352867093093065
w	3.9540859051662243
y	3.9436567009023245
z	3.94370232181665


[詳細設定]

 config/env.conf では実行環境に即した様々な設定をおこなうことができる。
これにより実行環境の差異を吸収することができる。

# インストールされた Hadoop のルートディレクトリ
HADOOP_ROOT=/usr/local/hadoop

# Streaming 用の .jar ファイルの場所
HADOOP_JAR=$HADOOP_ROOT/contrib/streaming/hadoop-streaming-0.20.205.0.jar

# Hadoop の実行用バイナリのパス
HADOOP=$HADOOP_HOME/bin/hadoop

# ログの出力先
JOBLOG=$SCRIPT_HOME/log/production.log

このファイルは単にシェルスクリプトとして呼ばれるため、事前処理もそのまま記述できる。
詳細はファイルの内容を参照のこと。


[処理概要]

本ソフトウェアのファイル体系は以下の通りである。

.
|
+- bin
|   |
|   +- run
|        実行ファイル本体
|
+- config
|   |
|   +- env.conf
|        設定ファイル
|
+- db
|   |
|   +- sqlite3.db
|        (RDB を利用する場合) DB の格納先
|
+- doc
|   |
|   +- README.ja
|        本ドキュメント
|
+- lib 処理に必要な主要なファイルが格納される
|   |
|   +- cached.rb
|   |    Memcached 用 Storage クラス
|   +- mapper.rb
|   |    Mapper
|   +- reducer.rb
|   |    Reducer
|   +- sqlite.rb
|        SQLite 用 Strorage クラス
|
+- data
|   |
|   +- shakespeare
|        サンプルの入力データ例となるシェークスピアの作品集データ
|
+- log ログファイルが格納される
|   |
|   +- production.log
|   |    処理経過が出力されるログファイル
|   +- result.log
|        集計結果が格納されるログファイル
|
+- script シェルスクリプトが格納される
|   |
|   +- migrate
|   |    HiveQL のマイグレーション用スクリプト
|   +- run
|   |    Hadoop Streaming に処理を受け渡すスクリプト本体
|   +- simple
|        Hadoop を経由せず UNIX パイプを利用する場合のスクリプト
|
+- spec RSpec によるテストコードが格納される
|
+- vendor 外部ライブラリ


[RDB の利用]

他の KVS, RDB 等を利用したい場合は Storage クラスを実装し
.get .put メソッドで入出力できるようラップする。


[MapReduce]

Mapper と Reducer は標準入出力を扱うためホワイトボックステストが困難である。
そのためできるだけ処理を外部クラスに切り出し軽くする必要がある。

Mapper の引数

集計条件を指定する。
test の場合、テストを実施する。

Reducer の引数

DB をラップするクラスファイルを指定する。
Storage クラスを require するファイルを指定する。



