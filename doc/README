/* README.ja */

名前
 hadoop-streaming-with-ruby - Hadoop によるデータ解析の足がかり

書式
 bin/run

説明
 このソフトウェアは Hadoop を利用してデータの解析をおこなう例である。
 Ruby と Hadoop Streaming を利用する。


[環境設定]

1) 前提条件
ruby, rspec, memcached. hadoop のインストールが完了していること。

2) テスト実行
$ cd ~/hadoop-streaming-with-ruby
$ rake spec

Mapper
  単語ごとの長さが返る

Reducer
  単語の平均の長さが返る

Finished in 2.74 seconds
3 examples, 0 failures
のように表示されることを確認する。


[実行方法]

まずは Hadoop を使わずに実行する。

$ script/simple

log/result.log
に平均単語長が出力されているはずなので確認する。

次項のサンプル出力例のようになっていれば OK である。


次に Hadoop Streaming 経由で実行する。

$ bin/run

log/development.log
log/result.log
内容を確認する。


[出力例]

キーと値は単語の頭文字及び平均の長さとなるはずである。

A	4.0587786986758125
B	4.482829648225033
C	5.094144830637628
D	5.131701404670692
E	5.225791656696179
F	5.2580151875858
G	5.338600164985088
H	5.2472084536194785
I	4.2055075760496585
J	4.22494788705704
K	4.239069981583794
L	4.313929511237651
M	4.4146156061963895
N	4.416221680350639
O	4.34373433128656
P	4.466512813780428
Q	4.473869629711021
R	4.525884443848295
S	4.60749029345652
T	4.555253252039183
U	4.560327642678283
V	4.571120585632692
W	4.583336668934876
X	4.582951186945846
Y	4.5669640446017805
Z	4.5670047920185395
a	4.234437810357059
b	4.2701022750177176
c	4.43969352298277
d	4.499539368627933
e	4.541806382120752
f	4.588768650188689
g	4.615405132641292
h	4.564287748621662
i	4.452069585132032
j	4.4568195954151
k	4.465295885123859
l	4.488767409677996
m	4.448762328963344
n	4.432700494273936
o	4.35365260293671
p	4.422855092653752
q	4.428286077071429
r	4.459560529226618
s	4.518934043209835
t	4.446391520339565
u	4.449859247228104
v	4.45853415731046
w	4.466812801305922
y	4.449462031529461
z	4.449492427127076


[詳細設定]

 config/env.conf では実行環境に即した様々な設定をおこなうことができる。
これにより実行環境の差異を吸収することができる。

# インストールされた Hadoop のルートディレクトリ
HADOOP_ROOT=/usr/local/hadoop

# Streaming 用の .jar ファイルの場所
HADOOP_JAR=$HADOOP_ROOT/contrib/streaming/hadoop-streaming-0.20.205.0.jar

# Hadoop の実行用バイナリのパス
HADOOP=$HADOOP_HOME/bin/hadoop

# ログの出力先
JOBLOG=$SCRIPT_HOME/log/production.log

このファイルは単にシェルスクリプトとして呼ばれるため、事前処理もそのまま記述できる。
詳細はファイルの内容を参照のこと。


[処理概要]

本ソフトウェアのファイル体系は以下の通りである。

.
|
+- bin
|   |
|   +- run
|        実行ファイル本体
|
+- config
|   |
|   +- env.conf
|        設定ファイル
|
+- db
|   |
|   +- sqlite3.db
|        (RDB を利用する場合) DB の格納先
|
+- doc
|   |
|   +- README.ja
|        本ドキュメント
|
+- lib 処理に必要な主要なファイルが格納される
|   |
|   +- cached.rb
|   |    Memcached 用 Storage クラス
|   +- mapper.rb
|   |    Mapper
|   +- reducer.rb
|   |    Reducer
|   +- sqlite.rb
|        SQLite 用 Strorage クラス
|
+- data
|   |
|   +- shakespeare
|        サンプルの入力データ例となるシェークスピアの作品集データ
|
+- log ログファイルが格納される
|   |
|   +- production.log
|   |    処理経過が出力されるログファイル
|   +- result.log
|        集計結果が格納されるログファイル
|
+- script シェルスクリプトが格納される
|   |
|   +- migrate
|   |    HiveQL のマイグレーション用スクリプト
|   +- run
|   |    Hadoop Streaming に処理を受け渡すスクリプト本体
|   +- simple
|        Hadoop を経由せず UNIX パイプを利用する場合のスクリプト
|
+- spec RSpec によるテストコードが格納される
|
+- vendor 外部ライブラリ


[RDB の利用]

他の KVS, RDB 等を利用したい場合は Storage クラスを実装し
.get .put メソッドで入出力できるようラップする。


[MapReduce]

Mapper と Reducer は標準入出力を扱うためホワイトボックステストが困難である。
そのためできるだけ処理を外部クラスに切り出し軽くする必要がある。

Mapper の引数

集計条件を指定する。
test の場合、テストを実施する。

Reducer の引数

DB をラップするクラスファイルを指定する。
Storage クラスを require するファイルを指定する。



